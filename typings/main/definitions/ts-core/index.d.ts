// Generated by typings
// Source: https://raw.githubusercontent.com/redound/ts-core/dev-package/lib/Data/Collection.d.ts
declare module '~ts-core/lib/Data/Collection' {
import BaseObject from '~ts-core/lib/BaseObject';
import EventEmitter from '~ts-core/lib/Events/EventEmitter';
export interface CollectionOperationInterface<T> {
    item: T;
    index: number;
}
export const CollectionEvents: {
    ADD: string;
    CHANGE: string;
    REMOVE: string;
    REPLACE: string;
    CLEAR: string;
};
export interface CollectionChangeParamsInterface<T> {
}
export interface CollectionClearParamsInterface<T> {
}
export interface CollectionAddParamsInterface<T> {
    operations: CollectionOperationInterface<T>[];
}
export interface CollectionRemoveParamsInterface<T> {
    operations: CollectionOperationInterface<T>[];
    clear: boolean;
}
export interface CollectionReplaceParamsInterface<T> {
    source: T;
    replacement: T;
}
export default class Collection<T> extends BaseObject {
    protected _data: T[];
    events: EventEmitter;
    constructor(data?: T[]);
    length: number;
    count(): number;
    add(item: T): T;
    addMany(items: T[]): T[];
    remove(item: T): void;
    removeMany(items: T[]): void;
    removeWhere(properties: any): void;
    replaceItem(source: T, replacement: T): T;
    clear(): void;
    each(iterator: _.ListIterator<T, void>): void;
    pluck<S>(propertyName: string): Collection<S>;
    isEmpty(): boolean;
    filter(iterator?: _.ListIterator<T, boolean>): T[];
    indexOf(item: T): number;
    find(iterator?: _.ListIterator<T, boolean>): T;
    where(properties: {}): T[];
    whereFirst(properties: {}): T;
    contains(item: T): boolean;
    map<S>(iterator: _.ListIterator<T, any>, context?: any): Collection<S>;
    transform(iterator: _.ListIterator<T, any>, context?: any): Collection<T>;
    reject(iterator: _.ListIterator<T, any>, context?: any): Collection<T>;
    toArray(): T[];
    all(): T[];
    clone(): Collection<T>;
}
}
declare module 'ts-core/lib/Data/Collection' {
export * from '~ts-core/lib/Data/Collection';
export { default } from '~ts-core/lib/Data/Collection';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/redound/ts-core/dev-package/lib/Data/Dictionary.d.ts
declare module '~ts-core/lib/Data/Dictionary' {
import BaseObject from '~ts-core/lib/BaseObject';
import EventEmitter from '~ts-core/lib/Events/EventEmitter';
export const DictionaryEvents: {
    ADD: string;
    CHANGE: string;
    REMOVE: string;
    CLEAR: string;
};
export interface DictionaryChangeParamsInterface {
}
export interface DictionaryChangeParamsInterface {
}
export interface DictionaryAddParamsInterface<K, V> {
    key: K;
    value: V;
}
export interface DictionaryRemoveParamsInterface<K, V> {
    key: K;
    value: V;
}
export interface DictionaryDataInterface {
    [key: string]: DictionaryKeyValuePairInterface;
}
export interface DictionaryIteratorInterface<K, V> {
    (key: K, value: V): any;
}
export interface DictionaryKeyValuePairInterface {
    key: any;
    originalKey: any;
    value: any;
}
export default class Dictionary<K, V> extends BaseObject {
    private static _OBJECT_UNIQUE_ID_KEY;
    private static _OBJECT_UNIQUE_ID_COUNTER;
    protected _data: DictionaryDataInterface;
    protected _itemCount: number;
    events: EventEmitter;
    constructor(data?: DictionaryDataInterface);
    get(key: K): V;
    set(key: K, value: V): void;
    remove(key: K): V;
    contains(key: K): boolean;
    containsValue(value: V): boolean;
    each(iterator: DictionaryIteratorInterface<K, V>): void;
    values(): V[];
    keys(): K[];
    count(): number;
    isEmpty(): boolean;
    clear(): void;
    toObject(): {};
    toArray(): V[];
    all(): V[];
    clone(): Dictionary<K, V>;
    protected _getPair(key: K): DictionaryKeyValuePairInterface;
    protected _getKeyString(key: K): string;
    protected _assignUniqueID(object: Object): void;
}
}
declare module 'ts-core/lib/Data/Dictionary' {
export * from '~ts-core/lib/Data/Dictionary';
export { default } from '~ts-core/lib/Data/Dictionary';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/redound/ts-core/dev-package/lib/Data/DynamicList.d.ts
declare module '~ts-core/lib/Data/DynamicList' {
import List from '~ts-core/lib/Data/List';
export default class DynamicList<T> extends List<T> {
    setRange(start: number, items: T[]): void;
    containsRange(start: number, length: number): boolean;
    getRange(start: number, length: number): T[];
}
}
declare module 'ts-core/lib/Data/DynamicList' {
export * from '~ts-core/lib/Data/DynamicList';
export { default } from '~ts-core/lib/Data/DynamicList';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/redound/ts-core/dev-package/lib/Data/List.d.ts
declare module '~ts-core/lib/Data/List' {
import BaseObject from '~ts-core/lib/BaseObject';
import EventEmitter from '~ts-core/lib/Events/EventEmitter';
export interface ListOperationInterface<T> {
    item: T;
    index: number;
}
export const ListEvents: {
    ADD: string;
    CHANGE: string;
    REMOVE: string;
    REPLACE: string;
    CLEAR: string;
};
export interface ListChangeParamsInterface<T> {
}
export interface ListClearParamsInterface<T> {
}
export interface ListAddParamsInterface<T> {
    operations: ListOperationInterface<T>[];
    clear: boolean;
}
export interface ListRemoveParamsInterface<T> {
    operations: ListOperationInterface<T>[];
}
export interface ListReplaceParamsInterface<T> {
    source: T;
    replacement: T;
}
export default class List<T> extends BaseObject {
    protected _data: T[];
    events: EventEmitter;
    constructor(data?: T[]);
    length: number;
    count(): number;
    add(item: T): void;
    addMany(items?: T[]): void;
    prepend(item: T): void;
    prependMany(items: T[]): void;
    insert(item: T, index: number): void;
    remove(item: T): void;
    removeAt(index: number): void;
    removeMany(items: T[]): void;
    removeWhere(properties: any): void;
    replaceItem(source: T, replacement: T): T;
    replace(index: number, replacement: T): T;
    clear(): void;
    each(iterator: _.ListIterator<T, void>): void;
    map<S>(iterator: _.ListIterator<T, any>, context?: any): List<S>;
    pluck<S>(propertyName: string): List<S>;
    isEmpty(): boolean;
    first(): T;
    last(): T;
    get(index: number): T;
    indexOf(item: T): number;
    sort(sortPredicate: any): void;
    find(iterator?: _.ListIterator<T, boolean>): T[];
    findFirst(iterator?: _.ListIterator<T, boolean>): T;
    where(properties: {}): T[];
    whereFirst(properties: {}): T;
    contains(item: T): boolean;
    toArray(): T[];
    all(): T[];
    clone(): List<T>;
}
}
declare module 'ts-core/lib/Data/List' {
export * from '~ts-core/lib/Data/List';
export { default } from '~ts-core/lib/Data/List';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/redound/ts-core/dev-package/lib/Data/Model.d.ts
declare module '~ts-core/lib/Data/Model' {
import BaseObject from '~ts-core/lib/BaseObject';
import EventEmitter from '~ts-core/lib/Events/EventEmitter';
export interface ModelInterface {
    new (data?: any): Model;
    primaryKey(): any;
    whitelist(): string[];
    defaults(): any;
}
export default class Model extends BaseObject {
    events: EventEmitter;
    constructor(data?: any);
    set(key: string, value: any): void;
    get(key: string): any;
    static primaryKey(): string;
    static whitelist(): string[];
    static defaults(): any;
    getId(): any;
    assign(data?: any): this;
    assignAll(data?: any): this;
    merge(model: Model): void;
    equals(data: any): boolean;
    getDataKeys(): string[];
    toObject(recursive?: boolean): {};
    description: any;
    toString(): any;
}
}
declare module 'ts-core/lib/Data/Model' {
export * from '~ts-core/lib/Data/Model';
export { default } from '~ts-core/lib/Data/Model';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/redound/ts-core/dev-package/lib/Data/ModelCollection.d.ts
declare module '~ts-core/lib/Data/ModelCollection' {
import Model, { ModelInterface } from '~ts-core/lib/Data/Model';
import Collection from '~ts-core/lib/Data/Collection';
export default class ModelCollection<T extends Model> extends Collection<T> {
    protected _modelClass: ModelInterface;
    constructor(modelClass: ModelInterface, data?: T[]);
    addManyData(data: {}[]): T[];
    addData(data: {}): T;
    contains(item: T): boolean;
    all(): T[];
    toArray(): T[];
    protected _instantiateModel(data: {}): T;
}
}
declare module 'ts-core/lib/Data/ModelCollection' {
export * from '~ts-core/lib/Data/ModelCollection';
export { default } from '~ts-core/lib/Data/ModelCollection';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/redound/ts-core/dev-package/lib/Data/ModelDictionary.d.ts
declare module '~ts-core/lib/Data/ModelDictionary' {
import { ModelInterface, default as Model } from '~ts-core/lib/Data/Model';
import Dictionary, { DictionaryDataInterface } from '~ts-core/lib/Data/Dictionary';
export default class ModelDictionary<K, V extends Model> extends Dictionary<K, V> {
    protected _modelClass: ModelInterface;
    constructor(modelClass: ModelInterface, data?: DictionaryDataInterface);
    addManyData(data: {}[]): V[];
    addData(data: {}): V;
    toArray(): any[];
    toObject(): {};
    protected _instantiateModel(data: {}): V;
}
}
declare module 'ts-core/lib/Data/ModelDictionary' {
export * from '~ts-core/lib/Data/ModelDictionary';
export { default } from '~ts-core/lib/Data/ModelDictionary';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/redound/ts-core/dev-package/lib/Data/ModelList.d.ts
declare module '~ts-core/lib/Data/ModelList' {
import Model from '~ts-core/lib/Data/Model';
import List from '~ts-core/lib/Data/List';
export default class ModelList<T extends Model> extends List<T> {
}
}
declare module 'ts-core/lib/Data/ModelList' {
export * from '~ts-core/lib/Data/ModelList';
export { default } from '~ts-core/lib/Data/ModelList';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/redound/ts-core/dev-package/lib/Data/SortedList.d.ts
declare module '~ts-core/lib/Data/SortedList' {
import BaseObject from '~ts-core/lib/BaseObject';
import EventEmitter from '~ts-core/lib/Events/EventEmitter';
export interface ISortedListOperation<T> {
    item: T;
    index: number;
}
export const SortedListEvents: {
    ADD: string;
    CHANGE: string;
    REMOVE: string;
    REPLACE: string;
    CLEAR: string;
    SORT: string;
};
export interface SortedListChangeParamsInterface<T> {
}
export interface SortedListClearParamsInterface<T> {
}
export interface SortedListSortParamsInterface<T> {
}
export interface SortedListAddParamsInterface<T> {
    operations: ISortedListOperation<T>[];
}
export interface SortedListRemoveParamsInterface<T> {
    operations: ISortedListOperation<T>[];
    clear: boolean;
}
export interface SortedListReplaceParamsInterface<T> {
    source: T;
    replacement: T;
}
export enum SortedListDirection {
    ASCENDING = 0,
    DESCENDING = 1,
}
export default class SortedList<T> extends BaseObject {
    protected _sortPredicate: any;
    protected _sortDirection: SortedListDirection;
    protected _data: T[];
    events: EventEmitter;
    constructor(data?: T[], sortPredicate?: any, direction?: SortedListDirection);
    length: number;
    count(): number;
    add(item: T): void;
    protected sortedIndex(item: T): number;
    addMany(items?: T[]): void;
    remove(item: T): void;
    removeMany(items: T[]): void;
    removeWhere(properties: any): void;
    replaceItem(source: T, replacement: T): T;
    clear(): void;
    each(iterator: _.ListIterator<T, void>): void;
    map<S>(iterator: _.ListIterator<T, any>, context?: any): SortedList<S>;
    pluck(propertyName: string): any[];
    isEmpty(): boolean;
    first(): T;
    last(): T;
    get(index: number): T;
    indexOf(item: T): number;
    find(iterator?: _.ListIterator<T, boolean>): T[];
    findFirst(iterator?: _.ListIterator<T, boolean>): T;
    where(properties: {}): T[];
    whereFirst(properties: {}): T;
    contains(item: T): boolean;
    toArray(): T[];
    all(): T[];
    clone(): SortedList<T>;
    sort(): void;
    setSortPredicate(predicate: any, direction?: SortedListDirection): void;
    getSortPredicate(): any;
    isAscending(): boolean;
    isDescending(): boolean;
    getSortDirection(): SortedListDirection;
}
}
declare module 'ts-core/lib/Data/SortedList' {
export * from '~ts-core/lib/Data/SortedList';
export { default } from '~ts-core/lib/Data/SortedList';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/redound/ts-core/dev-package/lib/DateTime/Timer.d.ts
declare module '~ts-core/lib/DateTime/Timer' {
import BaseObject from '~ts-core/lib/BaseObject';
import EventEmitter from '~ts-core/lib/Events/EventEmitter';
export interface TimerTickCallbackInterface {
    (tickCount: number, elapsedTime: number): void;
}
export const TimerEvents: {
    START: string;
    PAUSE: string;
    RESUME: string;
    STOP: string;
    TICK: string;
};
export interface TimerStartParamsInterface {
    startDate: Date;
}
export interface TimerPauseParamsInterface {
    startDate: Date;
    tickCount: number;
    elapsedTime: number;
}
export interface TimerResumeParamsInterface {
    startDate: Date;
    tickCount: number;
    elapsedTime: number;
}
export interface TimerStopParamsInterface {
    startDate: Date;
    tickCount: number;
    elapsedTime: number;
}
export interface TimerTickParamsInterface {
    startDate: Date;
    tickCount: number;
    elapsedTime: number;
}
export default class Timer extends BaseObject {
    timeout: number;
    tickCallback: TimerTickCallbackInterface;
    repeats: boolean;
    events: EventEmitter;
    tickCount: number;
    elapsedTime: number;
    startDate: Date;
    isStarted: boolean;
    private _isStarted;
    private _tickCount;
    private _startDate;
    private _internalTimer;
    private _internalTimerIsInterval;
    constructor(timeout: number, tickCallback?: TimerTickCallbackInterface, repeats?: boolean);
    start(): void;
    resume(): void;
    pause(): void;
    restart(): void;
    stop(): void;
    reset(): void;
    static start(timeout: number, tickCallback?: TimerTickCallbackInterface, repeats?: boolean): Timer;
    private _timerTick();
}
}
declare module 'ts-core/lib/DateTime/Timer' {
export * from '~ts-core/lib/DateTime/Timer';
export { default } from '~ts-core/lib/DateTime/Timer';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/redound/ts-core/dev-package/lib/Events/EventEmitter.d.ts
declare module '~ts-core/lib/Events/EventEmitter' {
import BaseObject from '~ts-core/lib/BaseObject';
export interface IEventEmitterCallback {
    (event: Event<any>): any;
}
export class Event<T> extends BaseObject {
    topic: string;
    private _params;
    caller: any;
    isStopped: boolean;
    constructor(topic: string, _params: T, caller: any);
    params: T;
    stop(): void;
}
export default class EventEmitter extends BaseObject {
    private _eventCallbacks;
    constructor();
    on(topics: string, callback: IEventEmitterCallback, context?: any, once?: boolean): this;
    once(topics: string, callback: IEventEmitterCallback, context?: any): this;
    off(topics: string, callback?: Function, context?: any): this;
    trigger<T>(topic: string, params?: T, caller?: any): this;
    reset(): this;
}
}
declare module 'ts-core/lib/Events/EventEmitter' {
export * from '~ts-core/lib/Events/EventEmitter';
export { default } from '~ts-core/lib/Events/EventEmitter';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/redound/ts-core/dev-package/lib/Exceptions/ArgumentException.d.ts
declare module '~ts-core/lib/Exceptions/ArgumentException' {
import BaseObject from '~ts-core/lib/BaseObject';
export default class ArgumentException extends BaseObject {
}
}
declare module 'ts-core/lib/Exceptions/ArgumentException' {
export * from '~ts-core/lib/Exceptions/ArgumentException';
export { default } from '~ts-core/lib/Exceptions/ArgumentException';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/redound/ts-core/dev-package/lib/Exceptions/Exception.d.ts
declare module '~ts-core/lib/Exceptions/Exception' {
import BaseObject from '~ts-core/lib/BaseObject';
export default class Exception extends BaseObject {
    message: string;
    code: number;
    data: {};
    name: string;
    constructor(message: string, code?: number, data?: {});
    toString(): string;
}
}
declare module 'ts-core/lib/Exceptions/Exception' {
export * from '~ts-core/lib/Exceptions/Exception';
export { default } from '~ts-core/lib/Exceptions/Exception';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/redound/ts-core/dev-package/lib/Geometry/Point.d.ts
declare module '~ts-core/lib/Geometry/Point' {
import BaseObject from '~ts-core/lib/BaseObject';
export default class Point extends BaseObject {
    x: number;
    y: number;
    constructor(x?: number, y?: number);
    translate(x: number, y: number): void;
}
}
declare module 'ts-core/lib/Geometry/Point' {
export * from '~ts-core/lib/Geometry/Point';
export { default } from '~ts-core/lib/Geometry/Point';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/redound/ts-core/dev-package/lib/Geometry/Rect.d.ts
declare module '~ts-core/lib/Geometry/Rect' {
import BaseObject from '~ts-core/lib/BaseObject';
import Point from '~ts-core/lib/Geometry/Point';
import Size from '~ts-core/lib/Geometry/Size';
export default class Rect extends BaseObject {
    origin: Point;
    size: Size;
    x: number;
    y: number;
    width: number;
    height: number;
    constructor(x?: number, y?: number, width?: number, height?: number);
    center(): Point;
    topLeft(): Point;
    bottomLeft(): Point;
    topRight(): Point;
    bottomRight(): Point;
    halfWidth(): number;
    halfHeight(): number;
    containsPoint(point: Point): boolean;
    containsRect(rect: Rect): boolean;
    intersectsRect(rect: Rect): boolean;
    inset(top: number, right: number, bottom: number, left: number): this;
    insetCenter(horizontal: number, vertical: number): this;
    expand(horizontal: number, vertical: number): this;
    reduce(horizontal: number, vertical: number): this;
}
}
declare module 'ts-core/lib/Geometry/Rect' {
export * from '~ts-core/lib/Geometry/Rect';
export { default } from '~ts-core/lib/Geometry/Rect';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/redound/ts-core/dev-package/lib/Geometry/Size.d.ts
declare module '~ts-core/lib/Geometry/Size' {
import BaseObject from '~ts-core/lib/BaseObject';
export default class Size extends BaseObject {
    width: number;
    height: number;
    constructor(width?: number, height?: number);
    halfWidth(): number;
    halfHeight(): number;
}
}
declare module 'ts-core/lib/Geometry/Size' {
export * from '~ts-core/lib/Geometry/Size';
export { default } from '~ts-core/lib/Geometry/Size';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/redound/ts-core/dev-package/lib/Logger/Streams/ConsoleStream.d.ts
declare module '~ts-core/lib/Logger/Streams/ConsoleStream' {
import { LogOptionsInterface, StreamInterface } from '~ts-core/lib/Logger/Logger';
import BaseObject from '~ts-core/lib/BaseObject';
export interface ConsoleInterface {
    log(): any;
    info(): any;
    warn(): any;
    error(): any;
}
export default class ConsoleStream extends BaseObject implements StreamInterface {
    private _console;
    colorsEnabled: boolean;
    constructor(_console: ConsoleInterface, colorsEnabled?: boolean);
    exec(options: LogOptionsInterface): void;
    protected _generateHex(input: string): string;
    protected _getIdealTextColor(bgColor: any): string;
}
}
declare module 'ts-core/lib/Logger/Streams/ConsoleStream' {
export * from '~ts-core/lib/Logger/Streams/ConsoleStream';
export { default } from '~ts-core/lib/Logger/Streams/ConsoleStream';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/redound/ts-core/dev-package/lib/Logger/Logger.d.ts
declare module '~ts-core/lib/Logger/Logger' {
import BaseObject from '~ts-core/lib/BaseObject';
import Dictionary from '~ts-core/lib/Data/Dictionary';
export interface StreamInterface extends BaseObject {
    exec(options: LogOptionsInterface): any;
}
export enum LogLevels {
    LOG = 0,
    INFO = 1,
    WARN = 2,
    ERROR = 3,
    FATAL = 4,
}
export interface LogOptionsInterface {
    level: LogLevels;
    tag: string;
    args: any[];
    time: number;
}
export interface StreamEntryInterface {
    level: LogLevels;
    stream: StreamInterface;
}
export default class Logger extends BaseObject {
    protected _streams: Dictionary<string, StreamEntryInterface>;
    protected _parent: Logger;
    protected _tag: string;
    constructor(parent?: Logger, tag?: string);
    child(tag: string): Logger;
    addStream(key: string, stream: StreamInterface, level?: LogLevels): void;
    removeStream(key: string): void;
    getStreams(): Dictionary<string, StreamEntryInterface>;
    log(...args: any[]): void;
    info(...args: any[]): void;
    warn(...args: any[]): void;
    error(...args: any[]): void;
    fatal(...args: any[]): void;
    private _exec(level, args);
}
}
declare module 'ts-core/lib/Logger/Logger' {
export * from '~ts-core/lib/Logger/Logger';
export { default } from '~ts-core/lib/Logger/Logger';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/redound/ts-core/dev-package/lib/Utils/Base64.d.ts
declare module '~ts-core/lib/Utils/Base64' {
import BaseObject from '~ts-core/lib/BaseObject';
export default class Base64 extends BaseObject {
    private static keyStr;
    encode(input: any): string;
    decode(input: any): string;
}
}
declare module 'ts-core/lib/Utils/Base64' {
export * from '~ts-core/lib/Utils/Base64';
export { default } from '~ts-core/lib/Utils/Base64';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/redound/ts-core/dev-package/lib/Utils/Enum.d.ts
declare module '~ts-core/lib/Utils/Enum' {
export default class Enum {
    static names(e: any): string[];
    static values(e: any): number[];
    static object(e: any): {
        name: string;
        value: number;
    }[];
}
}
declare module 'ts-core/lib/Utils/Enum' {
export * from '~ts-core/lib/Utils/Enum';
export { default } from '~ts-core/lib/Utils/Enum';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/redound/ts-core/dev-package/lib/Utils/Text.d.ts
declare module '~ts-core/lib/Utils/Text' {
import BaseObject from '~ts-core/lib/BaseObject';
export default class Text extends BaseObject {
    private static HtmlEntityMap;
    static escapeHtml(input: string): string;
    static truncate(input: string, maxLength: number, suffix?: string): string;
    static concatenate(parts: any[], seperator?: string, lastSeparator?: string): string;
    static zeroPad(input: string, width: number, zero?: string): string;
    static ucFirst(input: string): string;
    static startsWith(source: string, search: string): boolean;
    static endsWith(source: string, search: string): boolean;
}
}
declare module 'ts-core/lib/Utils/Text' {
export * from '~ts-core/lib/Utils/Text';
export { default } from '~ts-core/lib/Utils/Text';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/redound/ts-core/dev-package/lib/Utils/Random.d.ts
declare module '~ts-core/lib/Utils/Random' {
import BaseObject from '~ts-core/lib/BaseObject';
export default class Random extends BaseObject {
    private static _uuidLut;
    private static uuidLut;
    static number(min: number, max: number): number;
    static uniqueNumber(): number;
    static bool(): boolean;
    static string(length?: number, characters?: string): string;
    static uuid(): string;
}
}
declare module 'ts-core/lib/Utils/Random' {
export * from '~ts-core/lib/Utils/Random';
export { default } from '~ts-core/lib/Utils/Random';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/redound/ts-core/dev-package/lib/BaseObject.d.ts
declare module '~ts-core/lib/BaseObject' {
export default class BaseObject {
    static: any;
}
}
declare module 'ts-core/lib/BaseObject' {
export * from '~ts-core/lib/BaseObject';
export { default } from '~ts-core/lib/BaseObject';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/redound/ts-core/dev-package/lib/Config.d.ts
declare module '~ts-core/lib/Config' {
import EventEmitter from '~ts-core/lib/Events/EventEmitter';
export default class Config extends EventEmitter {
    private _cache;
    private _data;
    constructor(data?: any);
    get(key?: string): any;
    set(key: string, value: any): this;
    load(value: any): this;
    has(key: string): boolean;
    clear(key?: string): this;
}
}
declare module 'ts-core/lib/Config' {
export * from '~ts-core/lib/Config';
export { default } from '~ts-core/lib/Config';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/redound/ts-core/dev-package/lib/DI.d.ts
declare module '~ts-core/lib/DI' {
import BaseObject from '~ts-core/lib/BaseObject';
export interface IDIInjectable {
    getDI(): DI;
    setDI(di: DI): void;
}
export interface DIServiceFactoryInterface {
    (di: DI): any;
}
export default class DI extends BaseObject {
    private _services;
    private _cache;
    constructor();
    get(key: string, shared?: boolean): any;
    getShared(key: string): any;
    set(key: string, service: DIServiceFactoryInterface | any, shared?: boolean): void;
    setShared(key: string, service: DIServiceFactoryInterface | any): this;
    reset(): this;
    private _instantiate(service);
}
}
declare module 'ts-core/lib/DI' {
export * from '~ts-core/lib/DI';
export { default } from '~ts-core/lib/DI';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/redound/ts-core/dev-package/lib/ts-core.d.ts
declare module '~ts-core/lib/ts-core' {
export * from '~ts-core/lib/Data/Collection';
export * from '~ts-core/lib/Data/Dictionary';
export * from '~ts-core/lib/Data/DynamicList';
export * from '~ts-core/lib/Data/List';
export * from '~ts-core/lib/Data/Model';
export * from '~ts-core/lib/Data/ModelCollection';
export * from '~ts-core/lib/Data/ModelDictionary';
export * from '~ts-core/lib/Data/ModelList';
export * from '~ts-core/lib/Data/SortedList';
export * from '~ts-core/lib/DateTime/Timer';
export * from '~ts-core/lib/Events/EventEmitter';
export * from '~ts-core/lib/Exceptions/ArgumentException';
export * from '~ts-core/lib/Exceptions/Exception';
export * from '~ts-core/lib/Geometry/Point';
export * from '~ts-core/lib/Geometry/Rect';
export * from '~ts-core/lib/Geometry/Size';
export * from '~ts-core/lib/Logger/Streams/ConsoleStream';
export * from '~ts-core/lib/Logger/Logger';
export * from '~ts-core/lib/Utils/Base64';
export * from '~ts-core/lib/Utils/Enum';
export * from '~ts-core/lib/Utils/Text';
export * from '~ts-core/lib/Utils/Random';
export * from '~ts-core/lib/BaseObject';
export * from '~ts-core/lib/Config';
export * from '~ts-core/lib/DI';
}
declare module 'ts-core/lib/ts-core' {
export * from '~ts-core/lib/ts-core';
}
declare module 'ts-core' {
export * from '~ts-core/lib/ts-core';
}
